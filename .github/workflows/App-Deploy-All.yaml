# This workflow demonstrates building a container image, pushing to an Azure Container Registry and deploying to Kubernetes
# It is split into separate jobs for readability but could be squashed into a single job if that best suits your scenario

on:
  workflow_dispatch:
    inputs:
      ResourceGroupName:
        description: 'The Resource Group where your resources are deployed'
        required: true
        type: string
      AKSName:
        description: 'The Name of the AKS resource'
        required: true
        type: string
      ACRName:
        description: 'The Name of the ACR resource'
        required: true
        type: string
      AppName:
        description: 'The Name of the Application to deploy'
        required: true
        type: string
      Namespace:
        description: 'The Kubernetes Namespace to deploy the Application to'
        default: "default"
        required: false
        type: string
      AppRepo:
        description: 'The GitHub App code repo'
        default: "azure-samples/azure-voting-app-redis"
        required: false
        type: string
      AppRepoRef:
        description: 'The GitHub REF to use when referencing the App code repo'
        default: "129888"
        required: false
        type: string
      AppRepoPath:
        description: 'The directory in the repo containing the Dockerfile'
        default: "./azure-vote"
        required: false
        type: string
      Environment:
        description: 'A GitHub Environment to pull action secrets from'
        required: true
        type: string

permissions:
      id-token: write
      contents: read

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.AppRepo}}
          ref: ${{ inputs.AppRepoRef}}

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Connect to Azure Container Registry (ACR)
        id: acrconnect
        run: |
          echo "Retrieving access token from $ACRName"
          TOKEN=$(az acr login -n $ACRName --expose-token)

          if [ -z "$TOKEN" ]
          then
            echo "ACR Token was not retrieved successfully"
            exit 1
          fi

          ACRTOKEN=$(echo $TOKEN | jq -r ".accessToken")
          LOGINSERVER=$(echo $TOKEN | jq -r ".loginServer")

          echo "ACR Login Server: $LOGINSERVER"
          echo "::set-output name=loginServer::$LOGINSERVER"

          echo "Passing token as stdin to docker login"
          echo $ACRTOKEN | docker login $LOGINSERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

      # Builds and Pushes the container image to the Azure Container Registry (ACR)
      - name: Container build and push to a Azure Container Registry (ACR)
        env:
          AppRepoPath: "${{ inputs.AppRepoPath}}"
          AppName: "${{ inputs.AppName }}"
        run: |
          cd $AppRepoPath
          docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t ${{ inputs.ACRName }}.azurecr.io/${{ inputs.AppName }}:${{ github.run_number }} --label dockerfile-path=Dockerfile
          docker push ${{ inputs.ACRName }}.azurecr.io/${{ inputs.AppName }}:${{ github.run_number }}

  Deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}
    needs: [BuildPush]

    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      - name: Update image name in manifest file
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $line = Get-Content workloads/azure-vote/front-deployment.yml | Select-String image: | Select-Object -ExpandProperty Line
            $content = Get-Content workloads/azure-vote/front-deployment.yml
            $content | ForEach-Object {$_ -replace $line,"        image: ${{ inputs.ACRName }}.azurecr.io/${{ inputs.AppName }}:${{ github.run_number }}"} | Set-Content workloads/azure-vote/front-deployment.yml
          azPSVersion: "latest"
          
      - name: Install Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
            version: 'latest'

      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v2.0
        with:
          cluster-name: ${{ inputs.AKSName }}
          resource-group: ${{ inputs.ResourceGroupName }}

      - name: Kubelogin
        env:
          kubeloginversion: 'v0.0.11'
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v1.5
        env:
          ACRName: "${{ inputs.ACRName}}"
        with:
          manifests: |
            workloads/azure-vote/back-deployment.yml
            workloads/azure-vote/back-service.yml
            workloads/azure-vote/front-deployment.yml
            workloads/azure-vote/front-service.yml
          images: |
            ${{ inputs.ACRName }}.azurecr.io/${{ inputs.AppName }}:${{ github.run_number }}
          namespace: ${{ inputs.Namespace }}
